As seguintes linhas de comandos levam a que o exercício 1 evocado seja resolvido na integra:
Via GitBash:

Entrar na conta:
migue@OverLord MINGW64 ~
$ git config --global user.name "M1kewazovsk1"
migue@OverLord MINGW64 ~
$ git config --global user.mail miguelsousacordeiro@gmail.com

Listar as Configurações:
migue@OverLord MINGW64 ~
$ git config list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=schannel
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
user.name=M1kewazovsk1
user.email=miguelsousacordeiro@gmail.com
user.mail=miguelsousacordeiro@gmail.com

Entrar no Repositório e Criar um Ficheiro:
migue@OverLord MINGW64 ~

$ cd LP20162547
migue@OverLord MINGW64 ~/LP20162547 (nova-feature)

$ git commit -m "Adicionando um novo arquivo"
On branch nova-feature
nothing to commit, working tree clean

migue@OverLord MINGW64 ~/LP20162547 (nova-feature)
$ echo "" > log.txt

migue@OverLord MINGW64 ~/LP20162547 (nova-feature)
$ dir
README.md  arquivo.txt  log.txt




migue@OverLord MINGW64 ~/LP20162547 (nova-feature)
$ git --help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--no-lazy-fetch]
           [--no-optional-locks] [--no-advice] [--bare] [--git-dir=<path>]
           [--work-tree=<path>] [--namespace=<name>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   restore    Restore working tree files
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   diff       Show changes between commits, commit and working tree, etc
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   backfill   Download missing objects in a partial clone
   branch     List, create, or delete branches
   commit     Record changes to the repository
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   reset      Reset current HEAD to the specified state
   switch     Switch branches
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.







Criar um Repositório Vazio:

migue@OverLord MINGW64 ~/LP20162547 (nova-feature)
$ mkdir git-treino

migue@OverLord MINGW64 ~/LP20162547 (nova-feature)
$ cd git-treino

migue@OverLord MINGW64 ~/LP20162547/git-treino (nova-feature)
$ git init
Initialized empty Git repository in C:/Users/migue/LP20162547/git-treino/.git/

Adicionar o Repositório à Origem e Clonar:
migue@OverLord MINGW64 ~/LP20162547/git-treino (master)
$ git remote add origin https://github.com/Mikewazovsk1/LP20162547

migue@OverLord MINGW64 ~/LP20162547/git-treino (master)
$ git clone https://github.com/Mikewazovsk1/python/
Cloning into 'python'...
remote: Enumerating objects: 7, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 7 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
Receiving objects: 100% (7/7), done.
Resolving deltas: 100% (1/1), done.



migue@OverLord MINGW64 ~/LP20162547/git-treino (master)
$ cd python

Escrever no Ficheiro dentro do GitBash:
migue@OverLord MINGW64 ~/LP20162547/git-treino/python (main)
$ touch log.txt




warning: in the working copy of 'log.txt', LF will be replaced by CRLF the next time Git touches it
Aborting commit due to empty commit message.

Transportar a origem para o main:
migue@OverLord MINGW64 ~/LP20162547/git-treino/python (main)
$ git push origin main
Everything up-to-date

Status do Repositório:
migue@OverLord MINGW64 ~/LP20162547/git-treino/python (main)
$ git status
On branch main
Your branch is up to date with 'origin/main'.




Criar uma nova Branch e alterar para a mesma:
migue@OverLord MINGW64 ~/LP20162547/git-treino/python (main)
$ git branch nova-feature

migue@OverLord MINGW64 ~/LP20162547/git-treino/python (main)
$ git checkout nova-feature
M       log.txt
Switched to branch 'nova-feature'

Escrever dentro do ficheiro:
migue@OverLord MINGW64 ~/LP20162547/git-treino/python (nova-feature)
$ echo "1.1"
